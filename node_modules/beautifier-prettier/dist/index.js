"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const prettier = require("prettier");
const unibeautify_beautifier_1 = require("unibeautify-beautifier");
const pkg = require("../package.json");
exports.beautifier = {
    name: "Prettier",
    // link: "https://prettier.io/",
    options: {
        _: {
            useTabs: [
                ["indent_with_tabs", "indent_char"],
                (options) => {
                    if (options.indent_with_tabs === true) {
                        return true;
                    }
                    else {
                        return options.indent_char === "\t";
                    }
                }
            ],
            tabWidth: [
                ["indent_with_tabs", "indent_size"],
                (options) => {
                    if (options.indent_with_tabs === true) {
                        return 1;
                    }
                    else {
                        return options.indent_size || 1;
                    }
                }
            ],
            singleQuote: [
                ["convert_quotes"],
                (options) => {
                    if (options.convert_quotes === "double") {
                        return true;
                    }
                    return false;
                }
            ]
        },
        JavaScript: true,
        JSX: true,
        TypeScript: true,
        CSS: true,
        Less: true,
        SCSS: true,
        GraphQL: true,
        JSON: true,
        Markdown: true
    },
    beautify(data) {
        return new Promise((resolve, reject) => {
            const parser = parserForLanguage(data.language);
            if (!parser) {
                return reject(new Error(`Prettier Parser not found for langauge ${data.language.name}.`));
            }
            const text = prettier.format(data.text, Object.assign({}, data.options, { parser, filepath: data.filePath }));
            return resolve(text);
        });
    }
};
function parserForLanguage(language) {
    const prettierLanguage = prettier
        .getSupportInfo()
        .languages.find(lang => lang.name === language.name);
    if (prettierLanguage) {
        return prettierLanguage.parsers[0];
    }
    return undefined;
}
const config = {};
const wrappedBeautifier = unibeautify_beautifier_1.wrapBeautifier(pkg, exports.beautifier, config);
exports.default = wrappedBeautifier;
//# sourceMappingURL=index.js.map