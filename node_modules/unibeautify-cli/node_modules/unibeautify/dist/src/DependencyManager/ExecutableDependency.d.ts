/// <reference types="node" />
import { SpawnOptions } from "child_process";
import { Dependency, ExecutableDependencyDefinition, DependencyOptions } from "./Dependency";
export declare class ExecutableDependency extends Dependency {
    protected definition: ExecutableDependencyDefinition;
    constructor(definition: ExecutableDependencyDefinition, options?: DependencyOptions);
    protected loadVersion(): Promise<string>;
    private readonly versionArgs;
    run({args, options, stdin}: {
        args: RunArg[];
        options?: RunOptions;
        stdin?: any;
    }): Promise<RunResponse>;
    private resolveArgs(args);
    private readonly pathOrProgram;
    private readonly program;
    private readonly programPath;
    private spawn({exe, args, options, stdin});
}
export declare type RunArg = string | Promise<string> | undefined | null;
export interface RunOptions extends SpawnOptions {
    cwd?: string;
}
export interface RunResponse {
    stdout: string;
    stderr: string;
    exitCode: number;
}
